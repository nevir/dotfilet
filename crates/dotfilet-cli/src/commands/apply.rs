use crate::dotfilet_command;

dotfilet_command! {
    /// Apply configuration changes to the system
    pub(crate) struct ApplyCommand {
        /// Specific resources to apply
        #[arg()]
        resources: Vec<String>,

        /// Use a plan file generated by diff
        #[arg(long)]
        plan: Option<String>,
    }
}

impl ApplyCommand {
    pub(crate) fn execute(self) {
        match (self.resources.is_empty(), self.plan) {
            (true, None) => {
                println!("dotfilet apply: Not yet implemented");
                println!("This command will apply all configuration changes");
            }
            (false, None) => {
                println!("dotfilet apply: Not yet implemented");
                println!(
                    "This command will apply changes for: {}",
                    self.resources.join(", ")
                );
            }
            (_, Some(plan_file)) => {
                println!("dotfilet apply: Not yet implemented");
                println!(
                    "This command will apply changes from plan file: {}",
                    plan_file
                );
            }
        }
    }
}
