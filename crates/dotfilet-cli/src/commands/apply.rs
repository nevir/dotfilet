use clap::Parser;

/// Apply configuration changes to the system
#[derive(Parser)]
pub struct ApplyCommand {
    /// Specific resources to apply
    #[arg()]
    pub resources: Vec<String>,

    /// Use a plan file generated by diff
    #[arg(long)]
    pub plan: Option<String>,
}

impl ApplyCommand {
    pub fn execute(self) {
        match (self.resources.is_empty(), self.plan) {
            (true, None) => {
                println!("dotfilet apply: Not yet implemented");
                println!("This command will apply all configuration changes");
            }
            (false, None) => {
                println!("dotfilet apply: Not yet implemented");
                println!(
                    "This command will apply changes for: {}",
                    self.resources.join(", ")
                );
            }
            (_, Some(plan_file)) => {
                println!("dotfilet apply: Not yet implemented");
                println!(
                    "This command will apply changes from plan file: {}",
                    plan_file
                );
            }
        }
    }
}
