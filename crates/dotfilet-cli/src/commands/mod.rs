pub mod agent;
pub mod apply;
pub mod diff;
pub mod init;

use clap::Subcommand;

#[derive(Subcommand)]
pub enum Commands {
    #[command(about = "Scaffold a new Dotfilet repository")]
    Init,

    #[command(about = "Display pending configuration changes")]
    Diff {
        #[arg(help = "Specific resources to check for changes")]
        resources: Vec<String>,
    },

    #[command(about = "Apply configuration changes to the system")]
    Apply {
        #[arg(help = "Specific resources to apply")]
        resources: Vec<String>,

        #[arg(long, help = "Use a plan file generated by diff")]
        plan: Option<String>,
    },

    #[command(about = "Manage the sync agent")]
    Agent {
        #[command(subcommand)]
        command: agent::AgentCommands,
    },
}

impl Commands {
    pub fn execute(self, verbose: bool, dry_run: bool) {
        match self {
            Commands::Init => init::execute(verbose, dry_run),
            Commands::Diff { resources } => diff::execute(resources, verbose, dry_run),
            Commands::Apply { resources, plan } => {
                apply::execute(resources, plan, verbose, dry_run)
            }
            Commands::Agent { command } => agent::execute(command, verbose, dry_run),
        }
    }
}
